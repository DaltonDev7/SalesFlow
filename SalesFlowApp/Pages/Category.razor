@page "/Categorias"
@using System.Net.Http.Json
@inject IDialogService _dialogServicio
@inject HttpClient httpClient
@using SalesFlowApp.Models

<MudContainer Class="px-0.5 pt-1.5 mt-10">

    <MudButton OnClick="AbrirNuevoProducto" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="mb-6">Agregar</MudButton>

    <MudTable Items="@Elements" Dense="false" Hover="true" Bordered="true" Striped="true" Filter="new Func<ElementDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Productos</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Sign</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Position</MudTh>
            <MudTh>Molar mass</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Number</MudTd>
            <MudTd DataLabel="Sign">@context.Sign</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Position">@context.Position</MudTd>
            <MudTd DataLabel="Molar mass">@context.Molar</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</MudContainer>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ElementDto selectedItem1 = null;
    private HashSet<ElementDto> selectedItems = new HashSet<ElementDto>();

    private IEnumerable<ElementDto> Elements = new List<ElementDto>();

    private async Task AbrirNuevoProducto()
    {
        var dialogo = _dialogServicio.Show<AddEditCategory>("Nueva Categoria");
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
           // await ObtenerProductos();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Simula una pequeña espera para parecer una llamada real

        Elements = new List<ElementDto>
        {
            new ElementDto { Number = "1", Sign = "H", Name = "Hydrogen", Position = "1", Molar = "1.008" },
            new ElementDto { Number = "2", Sign = "He", Name = "Helium", Position = "2", Molar = "4.0026" },
            new ElementDto { Number = "3", Sign = "Li", Name = "Lithium", Position = "3", Molar = "6.94" },
            new ElementDto { Number = "4", Sign = "Be", Name = "Beryllium", Position = "4", Molar = "9.0122" },
            new ElementDto { Number = "5", Sign = "B", Name = "Boron", Position = "5", Molar = "10.81" }
        };
    }

    private bool FilterFunc1(ElementDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(ElementDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
            return true;
        return false;
    }
}